---
title: Using Bower with Middleman
description: Adding bower's front-end package management to a Middleman powered site.
tags: ruby, middleman, bower
layout: blog
---

Created by Twitter, [Bower](https://github.com/bower/bower) is an open source software project, which centralises management of front-end packages and their dependencies, in a fashion similar to how bundler manages gem dependencies for Ruby.
READMORE
## Getting started with Bower

Bower is hosted on GitHub, and, assuming that you have git, node, and npm installed, can be installed with:

~~~shell
npm install -g bower
~~~

Bower uses a json file called ````bower.json```` as the equivalent of Bundler's Gemfile. You can create an empty bower.json by running:

~~~shell
bower init
~~~

## Installing Packages
Once you have initialised Bower, you can begin to add packages. This site currently uses [unison.js](http://bjork24.github.io/Unison/) and [jquery-pjax](https://github.com/defunkt/jquery-pjax), so, let their installation be managed by bower:

~~~shell
bower install unison --save
bower install jquery-pjax --save
~~~

By default, Bower will store downloaded components in a central repository on your machine to share them between projects, adding the --save flag to the install command will force Bower to install a copy into the local project, and into the bower_components folder by default. This allows us to commit precise versions as part of our project, and remove the dependancy of other developers on Bower.

By now, the bower.json will look like this:

~~~json
{
  "name": "project_name",
  "version": "0.0.0",
  "homepage": "project_url",
  "authors": [
    "your_name"
  ],
  "license": "MIT",
  "private": true,
  "dependencies": {
    "unison": "~0.5.0",
    "jquery": "~2.1.0"
    "jquery-pjax": "~1.7.3"
  }
}
~~~

## Integrating with Middleman

Middleman uses Sprockets to take assets from various locations and process them into a final product.

To introduce the previously installed components to Sprockets, we need to add the bower_components to sprockets' path by adding the following to your config.rb file:

~~~ruby
sprockets.append_path File.join root.to_s, "bower_components"
~~~

However, depending on your setup, this may not play well with other Middleman components, such as asset_hash. We can avoid this problem by not amending the sprockets path until other components have been initialised. We do this by wrapping the line above in after_configuration, like so:

~~~ruby
after_configuration do
  sprockets.append_path File.join root.to_s, "bower_components"
end
~~~

## Including components in your javascript

Now that Sprockets is aware of our bower_components directory, we can include our components by adding a required statement to our main javascript file:

~~~javascript
//= require "unison/js/unison.min.js"
//= require "jquery-pjax/jquery.pjax.js"
~~~

This will now include our selected components as part of the javascript file when we build the project next.

An example of this in action can be found in the git repository [for this site on Github](https://github.com/FearMediocrity/fearmediocrity.co.uk).