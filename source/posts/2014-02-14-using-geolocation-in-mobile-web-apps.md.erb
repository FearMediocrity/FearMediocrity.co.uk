---
title: Using Geolocation in Mobile Web Apps
description: Adding bower's front-end package management to a Middleman powered site.
tags: html5, geolocation, ios, android, mobile
layout: article
---

While web-based mobile apps don't share the same popularity or feature sets of its native cousins, there are times when adding a web page to your home screen is required. In my case the client insisted.
READMORE
A mobile web app is just like a normal web app, powered through the functionality and APIs available to the browser. However, by adding the app to the users home screen we can do away with the browser ui and give the user a more app-like experience.


## The requirement

A recent project required that the "Add to home screen" mode, let's call this Standalone, should be assumed to be the default.

The app had a requirement that the users location should be updated on a regular basis, in order to help them find resources close to their current location.

This is where the HTML5 Geolocation API comes into play. In its most basic form the users' location can be gathered using the code below:

~~~javascript
navigator.geolocation.getCurrentPosition(function(position){
	alert(position.coords.latitude + " , " + position.coords.longitude);
});
~~~

See this code in action [here](http://codepen.io/FearMediocrity/pen/ybJKc)

This will prompt the user for permission to use their location, and if granted display an alert dialog with the users current latitude and longitude, or as close as the browser can determined.

## Asking for permission

The W3C specification for Geolocation [specifically states](http://www.w3.org/TR/geolocation-API/#security) that:

> User Agents must not send location information to Web sites without the express permission of the user

This means that managing permission for Geolocation functions is handled on a Browser level, and each browser has a slightly different implementation.

#### Desktop

Using the sample code above we can see that Chrome allows a straight "Allow" or "Block" option, which will permanently set permissions for the current site.

<%= image_tag 'posts/geolocation-mobile-desktop-chrome.png', alt: "Geolocation permission dialog in Google Chrome on OSX" %>

Where as Firefox allows permission to be granted once, permanently or not at all.

<%= image_tag 'posts/geolocation-mobile-desktop-firefox.png', alt: "Geolocation permission dialog in Firefox on OSX" %>

Safari is similar to Chrome, but the the additional option to allow further requests for the rest of the day

<%= image_tag 'posts/geolocation-mobile-desktop-safari.png', alt: "Geolocation permission dialog in Safari on OSX" %>

Surprisingly Internet Explorer has supported the Geolocation API since IE9, and has options to "Allow once", "Always allow" or "Always deney and don't tell me"

<%= image_tag 'posts/geolocation-mobile-desktop-internet-explorer.png', alt: "Geolocation permission dialog in Internet Explorer 11 on Windows 8" %>

#### Mobile

Still using the sample code above we can see on iOS (in both Safari and Chrome) that we are presented with a straight "Ok" or "Don't Allow" which is a permanent setting for the current site.

<%= image_tag 'posts/geolocation-mobile-mobile-safari.png', alt: "Geolocation permission dialog in Safari on iOS" %>

Chrome on Android performs in a similar fashion to the desktop version, with a banner style notification for "Allow" or "Deny"

<%= image_tag 'posts/geolocation-mobile-mobile-chrome.png', alt: "Geolocation permission dialog in Chrome on Android" %>

And finally, Windows phone uses an alert style message with a simple "Yes" or "No", and the option to make that decision permanent.

<%= image_tag 'posts/geolocation-mobile-mobile-windows.png', alt: "Geolocation permission dialog in Internet Explorer on Windows Phone" %>

## Standalone apps and the iOS problem

Easy right? A couple of lines of code and we've been able to retrieve the users location across all major desktop and mobile browsers. However, when the app has been added to the users home screen and is in standalone mode, the sample code no longer works on iOS.

Around the time iOS 6 launched the Geolocation API stopped working for standalone web apps that contained the following meta tag:

~~~html
<meta content="yes" name="apple-mobile-web-app-capable" />
~~~

This is slightly contradictory, as according to [Apple's own documentation](https://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/MetaTags.html) ````apple-mobile-web-app-capable declares that the app should run in full screen.

We could remove this tag on pages that require the Geolocation API, but this will inject the default Safari UI elements on to a single page in our web app, which isn't the best user experience.

## The solution

As it turns out, while navigator.geolocation.getCurrentPosition doesn't appear to be supported on standalone web apps, there is a similar call that works navigator.geolocation.watchPosition

watchPosition is intended to provide frequent updates on a users location, rather than a single update.

~~~javascript
navigator.geolocation.watchPosition(function(position){
   document.write(position.coords.latitude + ", " +  position.coords.longitude+"<br>");
});
~~~

This code will write your location to the DOM on a regular basis, with the interval determined by your browser and/or device. You can see the code in action [here](http://codepen.io/FearMediocrity/pen/erlpE)

watchPosition works in a similar manner to setInterval, which means we are also provided a function similar to that of clearInterval, in this case navigator.geolocation.clearWatch

In the code sample below we use a simple variable to store the watchPosition, then clear the interval as soon as the first location has been retrieved, resulting in a function that can retrieve a users location once and works on standalone apps on iOS.

~~~javascript
watch_id = navigator.geolocation.watchPosition(function(position){
   navigator.geolocation.clearWatch(watch_id);
   document.write(position.coords.latitude + ", " +  position.coords.longitude+"<br>");
});
~~~

You can see this code in action [here](http://codepen.io/FearMediocrity/pen/pbfEB)

## Tested Devices

I've tested the above code under the following conditions:

### Desktop (not standalone)
* Google Chrome (Mac, v32)
* Firefox (Mac, v26)
* Safari (Mac, v7.0.1)
* Internet Explorer, (Windows, v9, v10, v11)

### Mobile (not standalone)
* iOS 7 - Safari and Chrome
* Android - Chrome
* Windows Phone 8 - Internet Explorer

### Mobile (standalone)
* iOS 7 - Safari
* Android - Chrome

## In closing...
This post was cobbled together after extensive requests from clients, using information from [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/WebAPI/Using_geolocation#Watching_the_current_position), [Stack Overflow](http://stackoverflow.com/questions/12503815/ios-6-breaks-geolocation-in-webapps-apple-mobile-web-app-capable), and many other people complaining about Geolocation in Standalone mode.
